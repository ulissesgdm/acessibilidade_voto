
# Perfil sociodemogáfico do comparecimento eleitoral
pacman::p_load(caret, tidyverse, fuzzyjoin, dplyr, ggplot2, corrplot, forcats, funModeling, ggplot2, mlbench, mltools, randomForest, rattle, haven, ade4, car, mboost, sjPlot, margins)
diretorio <- read.csv2("https://raw.githubusercontent.com/ulissesgdm/acessibilidade_voto/main/municipio.csv", stringsAsFactors = T, sep = ",", encoding = "UTF-8")
diretorio <- select(diretorio, c(1:3))


#download base de dados comparecimento tse
comp1 <- read.csv2("C:/Users/uliss/Downloads/perfil_comparecimento_abstencao_2022.csv", stringsAsFactors = T, sep = ";", encoding = "latin1")

compt1 <- comp1 %>% filter(NR_TURNO == 1)

compt1 <- compt1 %>% group_by(CD_MUNICIPIO) %>% summarise(QT_APTOS = sum(QT_APTOS, na.rm = TRUE),
                                                       QT_COMPARECIMENTO = sum(QT_COMPARECIMENTO, na.rm = TRUE),
                                                       QT_ABSTENCAO = sum(QT_ABSTENCAO, na.rm = TRUE),
                                                       QT_COMPARECIMENTO_DEFICIENCIA = sum(QT_COMPARECIMENTO_DEFICIENCIA, na.rm = TRUE),
                                                       QT_ABSTENCAO_DEFICIENCIA = sum(QT_ABSTENCAO_DEFICIENCIA, na.rm = TRUE),
                                                       NR_TURNO = mean(NR_TURNO, na.rm = TRUE))
compt2 <- comp1 %>% filter(NR_TURNO == 2)

compt2 <- compt2 %>% group_by(CD_MUNICIPIO) %>% summarise(QT_APTOS = sum(QT_APTOS, na.rm = TRUE),
                                                          QT_COMPARECIMENTO = sum(QT_COMPARECIMENTO, na.rm = TRUE),
                                                          QT_ABSTENCAO = sum(QT_ABSTENCAO, na.rm = TRUE),
                                                          QT_COMPARECIMENTO_DEFICIENCIA = sum(QT_COMPARECIMENTO_DEFICIENCIA, na.rm = TRUE),
                                                          QT_ABSTENCAO_DEFICIENCIA = sum(QT_ABSTENCAO_DEFICIENCIA, na.rm = TRUE),
                                                          NR_TURNO = mean(NR_TURNO, na.rm = TRUE))
comp <- bind_rows(compt1,compt2)

                                                       
#subtraindo valores da quatidade de comparecimento e abstenção geral, que engloba o comparecimento e abstensão de deficientes
comp$QT_COMPARECIMENTO <- comp$QT_COMPARECIMENTO-comp$QT_COMPARECIMENTO_DEFICIENCIA
comp$QT_ABSTENCAO <- comp$QT_ABSTENCAO-comp$QT_ABSTENCAO_DEFICIENCIA


#Criando variável aptos geral a partir da soma do comparecimento e abstenção geral
comp$QT_APTOS_GERAL <- comp$QT_COMPARECIMENTO+comp$QT_ABSTENCAO


#Criando variável aptos deficiência a partir da soma do comparecimento e abstenção dos que declararam deficiência
comp$QT_APTOS_DEFICIENCIA <- comp$QT_COMPARECIMENTO_DEFICIENCIA+comp$QT_ABSTENCAO_DEFICIENCIA

comp1$QT_APTOS_DEFICIENCIA <- comp1$QT_COMPARECIMENTO_DEFICIENCIA+comp1$QT_ABSTENCAO_DEFICIENCIA


#Criando variáveis de percentual de comparecimento do eleitorado geral e de deficientes
comp$PC_COMPARECIMENTO_GERAL <- comp$QT_COMPARECIMENTO/comp$QT_APTOS_GERAL
comp$PC_COMPARECIMENTO_DEFICIENCIA <- comp$QT_COMPARECIMENTO_DEFICIENCIA/comp$QT_APTOS_DEFICIENCIA

#Dowload votos para presidente
votacao_presidente <- read.csv2("C:/Users/uliss/Downloads/votacao_candidato_1.csv", stringsAsFactors = T, sep = ";", encoding = "latin1")
votacao_presidente_ <- read.csv2("C:/Users/uliss/Downloads/votacao_candidato_2.csv", stringsAsFactors = T, sep = ";", encoding = "latin1")
votacao_presidente_1 <- votacao_presidente %>% filter(nm_candidato == "LUIZ INÁCIO LULA DA SILVA")
votacao_presidente_1$Votos_lula <- votacao_presidente_1$qt_votos_nominais
votacao_presidente_2 <- votacao_presidente %>% filter(nm_candidato == "JAIR MESSIAS BOLSONARO")
votacao_presidente_2$Votos_bolsonaro <- votacao_presidente_2$qt_votos_nominais
votacao_1 <- inner_join(votacao_presidente_1,votacao_presidente_2, by = c("cd_municipio"="cd_municipio"), mode='left') %>% select(1,2,5,6,9,17)
vt_1 <- votacao_presidente_ %>% filter(nm_candidato == "LUIZ INÁCIO LULA DA SILVA")
vt_1$Votos_lula <- vt_1$qt_votos_nominais
vt_2 <- votacao_presidente_ %>% filter(nm_candidato == "JAIR MESSIAS BOLSONARO")
vt_2$Votos_bolsonaro <- vt_2$qt_votos_nominais
vt <- inner_join(vt_1,vt_2, by = c("cd_municipio"="cd_municipio"), mode='left') %>% select(1,2,5,6,9,17)
votacao <- bind_rows(votacao_1, vt)
comp <- inner_join(comp, votacao, by = c("CD_MUNICIPIO" = "cd_municipio", "NR_TURNO" = "nr_turno.x"), mode='left')

comp$PC_VOTO_LULA <- comp$Votos_lula/comp$qt_votos_validos.x




# Dowload dados votos nulos e brancos
nulos_1 <- read.csv2("https://raw.githubusercontent.com/ulissesgdm/acessibilidade_voto/main/dados_votos_anulados_1.csv", stringsAsFactors = T, sep = ";", encoding = "latin1")
nulos_2 <- read.csv2("https://raw.githubusercontent.com/ulissesgdm/acessibilidade_voto/main/dados_votos_anulados_2.csv", stringsAsFactors = T, sep = ";", encoding = "latin1")
nulos <- bind_rows(nulos_1, nulos_2)
nulos$pc_voto_branco <- nulos$qt_votos_brancos/nulos$qt_comparecimento
nulos$pc_voto_nulo <- nulos$qt_total_votos_nulos/nulos$qt_comparecimento
comp <- inner_join(comp, nulos, by = c("CD_MUNICIPIO" = "cd_municipio", "NR_TURNO" = "nr_turno"), mode='left')


#download base de dados idh
idh <- read.csv2("https://github.com/ulissesgdm/acessibilidade_voto/raw/main/IDH_2010.csv", stringsAsFactors = T, sep = ";", encoding = "UTF-8")
idh <- select(idh, c(3,4,5,6,8,14,19,71,76,77,79,81,92,146,149,234,235,236,237))
idh <-  inner_join(diretorio, idh, by = c("id_municipio_6" = "Código.do.Município"), mode='left')
dados <- inner_join(comp, idh, by = c("CD_MUNICIPIO" = "id_municipio_tse"), mode='left')


# Download e tratamento dos dados do censo escolar 2021
censo <- read.csv2("C:/Users/uliss/Downloads/microdados_ed_basica_2021.csv", stringsAsFactors = T, sep = ";", encoding = "latin1")
censo <-select(censo, c(5,7,8,12,15,16,27,135,136,137,138,139,140,141,142,143))
censo <- censo %>% filter(TP_DEPENDENCIA < 4)
censo_ <- censo %>% group_by(CO_MUNICIPIO) %>% summarise(ACESSIBILIDADE_INEXISTENTE = mean(IN_ACESSIBILIDADE_INEXISTENTE, na.rm = TRUE),
                                                         ACESSIBILIDADE_CORRIMAO = mean(IN_ACESSIBILIDADE_CORRIMAO, na.rm = TRUE),
                                                         ACESSIBILIDADE_PISO_TATEIS = mean(IN_ACESSIBILIDADE_PISOS_TATEIS, na.rm = TRUE),
                                                         ACESSIBILIDADE_VAO_LIVRE = mean(IN_ACESSIBILIDADE_VAO_LIVRE, na.rm = TRUE),
                                                         ACESSIBILIDADE_RAMPAS = mean(IN_ACESSIBILIDADE_RAMPAS, na.rm = TRUE),
                                                         ACESSIBILIDADE_SINAL_SONORO = mean(IN_ACESSIBILIDADE_SINAL_SONORO, na.rm = TRUE),
                                                         ACESSIBILIDADE_SINAL_VISUAL = mean(IN_ACESSIBILIDADE_SINAL_VISUAL, na.rm = TRUE),
                                                         ACESSIBILIDADE_SINAL_TATIL = mean(IN_ACESSIBILIDADE_SINAL_TATIL, na.rm = TRUE))


ibge <-  read.csv2("https://raw.githubusercontent.com/ulissesgdm/acessibilidade_voto/main/Ibge_municipios.csv", stringsAsFactors = T, sep = ";", encoding = "UTF-8")

escolas_municipios <- inner_join(censo_, ibge, by = c("CO_MUNICIPIO"="IBGE7"), mode='left')
escolas_municipios$ACESSIBILIDADE <- rowMeans (escolas_municipios [, c (3:9)])


#União base de dados comparecimento/idh com dados de acessibilidade nas escolas
base <- inner_join(escolas_municipios, dados, by = c('CO_MUNICIPIO' = "id_municipio"), mode='left')
base$pc_voto_lula <- base$Votos_lula/base$qt_votos_nom_validos
base$pc_voto_bolsonaro <- base$Votos_bolsonaro/base$qt_votos_nom_validos

#Variáveis
rm(censo, censo_, dados, ibge, escolas_municipios, diretorio, idh, nulos, nulos_1, nulos_2, vt, votacao_1, votacao, votacao_presidente, votacao_presidente_, votacao_presidente_1, votacao_presidente_2, vt_1, vt_2)


# Teste de correlação variáveis de acessibilidade


rm_teste1 <- lm(ACESSIBILIDADE_INEXISTENTE ~ ACESSIBILIDADE +  Região, data = base)
summary(rm_teste)

plot_model(rm_teste1, type="pred")


tab_model(rm_teste1, 
          show.reflvl = T, 
          show.intercept = F, 
          p.style = "numeric_stars")

rm_teste2 <- lm(ACESSIBILIDADE_INEXISTENTE ~ IDHM.Renda + IDHM.Educação +  Região, data = base)
summary(rm_teste2)

tab_model(rm_teste2, 
          show.reflvl = T, 
          show.intercept = F, 
          p.style = "numeric_stars")

plot_model(rm_teste2, type="pred")


hist(x = reg_acessibilidaded$residuals, col = 'gray', xlab = 'Resíduos', ylab = 'Densidade de Probabilidade',
     probability = TRUE) 
lines(density(reg_acessibilidaded$residuals))

## Regressão Linear - População geral

#Variáveis 

reg_LM <- lm(QT_COMPARECIMENTO ~  DS_GRAU_ESCOLARIDADE + DS_FAIXA_ETARIA + NR_TURNO +  DS_GENERO + QT_APTOS + DS_ESTADO_CIVIL , data = comp1)


summary(reg_LM) # sumário do modelo linear

plot_model(reg_LM, type="pred")+ theme(axis.text.x = element_text(angle = 45, hjust = 1))


reg_idh <- lm(PC_COMPARECIMENTO_GERAL ~   NR_TURNO + QT_APTOS + Região + IDHM.Educação +IDHM.Longevidade + IDHM.Renda, data = base)

summary(reg_idh)

reg_acessibilidade <- lm(PC_COMPARECIMENTO_GERAL ~  NR_TURNO + QT_APTOS_GERAL + Região + IDHM.Renda +ACESSIBILIDADE_INEXISTENTE + ACESSIBILIDADE + Porte +IDHM.Renda , data = base)

summary(reg_acessibilidade)

reg_voto <- lm(QT_COMPARECIMENTO ~  NR_TURNO + QT_APTOS_GERAL + Região + pc_voto_branco + pc_voto_nulo  , data = base)

summary(reg_voto)


rm(reg_acessibilidade, reg_idh)

## Regressão Linear - Comparecimento deficiente

reg_LMD <- lm(QT_COMPARECIMENTO_DEFICIENCIA ~ DS_GRAU_ESCOLARIDADE + DS_FAIXA_ETARIA + NR_TURNO + DS_GENERO + QT_APTOS_DEFICIENCIA + DS_ESTADO_CIVIL , data = comp1)

summary(reg_LMD)

plot_model(reg_LMD, type="pred")

reg_idhd <- lm(PC_COMPARECIMENTO_DEFICIENCIA ~   NR_TURNO + QT_APTOS_DEFICIENCIA  + Região  + IDHM.Educação +IDHM.Longevidade + IDHM.Renda, data = base)

summary(reg_idhd)

reg_acessibilidaded <- lm(PC_COMPARECIMENTO_DEFICIENCIA ~ NR_TURNO + QT_APTOS_DEFICIENCIA  + Região + ACESSIBILIDADE_INEXISTENTE + ACESSIBILIDADE + Porte +IDHM.Renda + IDHM.Educação, data = base)

summary(reg_acessibilidaded)

reg_votod <- lm(QT_COMPARECIMENTO_DEFICIENCIA ~  NR_TURNO + QT_APTOS_DEFICIENCIA + Região + pc_voto_branco + pc_voto_nulo  , data = base)

summary(reg_votod)



#Gráficos de Predição

plot_model(reg_LM, type = "pred")

plot_model(reg_LMD, type = "pred")


plot_models(reg_acessibilidade, reg_acessibilidaded, show.values = T, grid = TRUE) + ylim(-.5,.5)

plot_models(reg_idh, reg_idhd, show.values = T, grid = TRUE) + ylim(-.2,.2)
 
plot_model(reg_acessibilidaded, type = "pred", terms = c("ACESSIBILIDADE_INEXISTENTE", "NR_TURNO", "Porte[Pequeno I, Pequeno II, Médio, Grande, Metrópole]"))

plot_model(reg_acessibilidaded, type = "pred", terms = c("ACESSIBILIDADE", "NR_TURNO", "Porte[Pequeno I, Pequeno II, Médio, Grande, Metrópole]"))

plot_model(reg_acessibilidade, type = "pred", terms = c("ACESSIBILIDADE", "NR_TURNO", "Porte[Pequeno I, Pequeno II, Médio, Grande, Metrópole]"))


plot_model(reg_acessibilidade, type = "pred", terms = c("ACESSIBILIDADE_INEXISTENTE", "NR_TURNO", "Porte[Pequeno I, Pequeno II, Médio, Grande, Metrópole]"))

plot_model(reg_acessibilidaded, type = "pred", terms = c("IDHM.Renda", "NR_TURNO", "Porte[Pequeno I, Pequeno II, Médio, Grande, Metrópole]"))


plot_model(reg_acessibilidaded, type = "pred", terms = c("IDHM.Educação", "NR_TURNO", "Porte[Pequeno I, Pequeno II, Médio, Grande, Metrópole]"))


tab_model(reg_LMD, 
          show.reflvl = T, 
          show.intercept = F, 
          p.style = "numeric_stars")

